[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "flask-collaborative-todo-docker"
version = "0.1.0"
description = "An example Flask application with Postgres and Docker"
authors = []
dependencies = [
    "flask",
    "flask-sqlalchemy",
    "flask-migrate",
    "gunicorn",
    "pydantic",
    "python-dotenv",
    "psycopg2-binary",
    "Flask-WTF",
    "flask-login",
    "flask-marshmallow",
    "marshmallow-sqlalchemy",
    "pyjwt",
    "Flask-Mail"
]

[project.optional-dependencies]
dev = [
    "black",
    "isort",
    "Flask-Cors"
]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-dotenv"
]

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pylint.MESSAGE_CONTROL]
disable = [
    "cyclic-import",
    "duplicate-code",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-module-docstring",
    "too-few-public-methods",
]
enable = "useless-suppression"
extension-pkg-allow-list = ["pydantic", "asyncpg.pgproto.pgproto", "orjson"]

[tool.pylint.VARIABLES]
ignored-argument-names = "args|kwargs|_|__"

[tool.pylint.BASIC]
good-names = "_,__,i,e,k,v,fn,get,post,put,patch,delete,route,asgi,websocket,Dependency,Body,Parameter"
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx = "(__.*__|main|test.*|.*test|.*Test|^_.*)$"

[tool.pylint.REPORTS]
reports = "no"

[tool.pylint.FORMAT]
max-line-length = "120"

[tool.pylint.LOGGING]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules = ["logging"]

